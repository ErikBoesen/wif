#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import stat
import json
from getpass import getpass

DATA_PATH = os.path.expanduser('~') + '/.wifdata'
MACADDR_RE = re.compile('([0-9a-f]{2}\:){5}([0-9a-f]){2}')

parser = argparse.ArgumentParser(description='Handle internet connections on MacOS.')
parser.add_argument('verb')
parser.add_argument('-n', dest='network', help='Name of network to which to connect')
parser.add_argument('-p', dest='password', help='Password for network to which you wish to connect. USE NOT RECOMMENDED.')
args = parser.parse_args()

networks = {}
if os.path.isfile(DATA_PATH):
    with open(DATA_PATH, 'r') as f:
        networks = json.load(f)
else:
    with open(DATA_PATH, 'w') as f:
        json.dump(networks, f)
    os.chmod(DATA_PATH, stat.S_IRUSR | stat.S_IRUSR)

# Warn if group or public can read config and the private details therein.
if os.stat(DATA_PATH).st_mode & (stat.S_IRGRP | stat.S_IROTH):
    print('Warning: network data file ({path}) may be accessible by other users.'.format(path=DATA_PATH))

if args.verb == 'on':
    # TODO: Detect proper interface, not always en1
    os.system('/usr/sbin/networksetup -setairportpower en1 on')
elif args.verb == 'off':
    os.system('/usr/sbin/networksetup -setairportpower en1 off')
elif args.verb == 'list':
    # TODO: Give curated output. airport's output is not the cleanest.
    # TODO: -s is a legacy flag and may be removed in the future.
    # Then again, is Apple honestly supporting ANY of their CLI tools? Vote in the comments.
    raw = subprocess.check_output(['/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport', '-s']).decode()
    if raw == 'No networks found\n':
        # TODO: Colors or something
        print(raw, end='')
    else:
        # Must remove last empty item and title row
        split = [line.split() for line in raw.split('\n')][1:-1]
        for network in split:
            #print(network)
            name_col = 1
            ssid = network[0]
            while not MACADDR_RE.match(network[name_col]):
                ssid += ' ' + network[name_col]
                name_col += 1
            print('{ssid} / {security}'.format(ssid=ssid,
                                               security=network[-1]))
elif args.verb == 'connect':
    # TODO: Automatically recognize passwordless networks
    password = args.password
    if not password:
        password = networks.get(args.network)
    if not password:
        password = getpass()
    networks[args.network] = password
    with open(DATA_PATH, 'w') as f:
        json.dump(networks, f)
    # TODO: Do things in the background/more nicely
    os.system('/usr/sbin/networksetup -setairportnetwork en1 {network} {password}'.format(network=args.network,
                                                                                password=password))
elif args.verb == 'password':
    os.system('/usr/bin/security find-generic-password -wga {network}'.format(network=args.network))
